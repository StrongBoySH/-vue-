{"remainingRequest":"D:\\phpStudy\\PHPTutorial\\WWW\\vue\\object - 副本\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\phpStudy\\PHPTutorial\\WWW\\vue\\object - 副本\\node_modules\\vant-ui\\components\\ui-select\\ui-select.vue?vue&type=style&index=0&id=547924a3&lang=scss&scoped=true&","dependencies":[{"path":"D:\\phpStudy\\PHPTutorial\\WWW\\vue\\object - 副本\\node_modules\\vant-ui\\components\\ui-select\\ui-select.vue","mtime":499162500000},{"path":"D:\\phpStudy\\PHPTutorial\\WWW\\vue\\object - 副本\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\phpStudy\\PHPTutorial\\WWW\\vue\\object - 副本\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\phpStudy\\PHPTutorial\\WWW\\vue\\object - 副本\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\phpStudy\\PHPTutorial\\WWW\\vue\\object - 副本\\node_modules\\sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\phpStudy\\PHPTutorial\\WWW\\vue\\object - 副本\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\phpStudy\\PHPTutorial\\WWW\\vue\\object - 副本\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5zZWFyY2gtYnRuewogICAgY29sb3I6ICMyNmEyZmY7Cn0KLnRleHQtdGlwewogICAgZm9udC1zaXplOiAxNHB4OwogICAgY29sb3I6IHJnYmEoYmxhY2ssIDAuMyk7CiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7Cn0KLnNlYXJjaC10ZXh0ewogICAgZGlzcGxheTogZmxleDsKICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsKICAgICY+LnRleHR7CiAgICAgICAgbWFyZ2luLWxlZnQ6IDVweDsKICAgIH0KfQo="},{"version":3,"sources":["ui-select.vue"],"names":[],"mappings":";AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ui-select.vue","sourceRoot":"node_modules/vant-ui/components/ui-select","sourcesContent":["<style lang=\"scss\" scoped>\n    .search-btn{\n        color: #26a2ff;\n    }\n    .text-tip{\n        font-size: 14px;\n        color: rgba(black, 0.3);\n        text-align: center;\n    }\n    .search-text{\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        &>.text{\n            margin-left: 5px;\n        }\n    }\n</style>\n<template>\n    <!-- 单元格 -->\n    <van-field\n        v-model=\"fullText\"\n        :label=\"label\"\n        :placeholder=\"placeholder\"\n        :required=\"required\"\n        :disabled=\"disabled\"\n        readonly\n        @focus=\"open()\"\n    >\n\n        <template v-slot:button>\n            <ui-page ref=\"popup\" style=\"z-index:100\">\n                <!-- 操作选中后,显示确定/返回按钮 -->\n                <template v-slot:header>\n                    <van-nav-bar :title=\"pageTitle\" :left-text=\"isChanged?'确定':''\" left-arrow @click-left=\"backAndConfirm()\" />\n                    <!-- 搜索框 -->\n                    <van-search v-if=\"$listeners.search\" :show-action=\"!!searchVal\" v-model=\"searchVal\" :disabled=\"isSearching\">\n                        <template v-slot:action>\n                            <a v-if=\"searchVal!=''\" @click=\"search(searchVal)\" class=\"search-btn\" >搜索</a>\n                        </template>\n                    </van-search>\n                    <!-- 插槽 -->\n                    <div v-if=\"!searchVal\">\n                        <!-- 可以插入例如tab -->\n                        <slot></slot>\n                    </div>\n                </template>\n\n                <!-- 文本提示区 -->\n                <div class=\"text-tip\">\n\n                    <p v-show=\"!isSearching && loaded && optionsAll.length===0\" :data=\"options\">暂无数据</p>\n\n                    <p v-show=\"isSearching || !loaded\" class=\"search-text\">\n                        <van-loading type=\"spinner\" size=\"16px\"/>\n                        <span class=\"text\">正在搜索数据...</span>\n                    </p>\n                </div>\n\n                <!-- 操作列表区 -->\n                <div v-if=\"optionsAll.length>0\">\n                    <!-- 多选 -->\n                    <van-checkbox-group v-if=\"multiple\" v-model=\"selected\" :max=\"max\">\n                        <van-cell-group>\n                            <van-cell v-for=\"(item,index) in optionsAll\" :title=\"item[valueKey]\" :key=\"item.id\" @click=\"toggleCheckbox(index)\">\n                                <van-checkbox :name=\"item.id\" ref=\"checkboxes\" shape=\"square\" slot=\"right-icon\"/>\n                            </van-cell>\n                        </van-cell-group>\n                    </van-checkbox-group>\n                    <!-- 单选 -->\n                    <van-radio-group v-else v-model=\"selected\">\n                        <van-cell-group>\n                            <van-cell v-for=\"item in optionsAll\" :key=\"item.id\" :title=\"item[valueKey]\" clickable @click=\"selected=item.id\">\n                                <van-radio :name=\"item.id\" slot=\"right-icon\"/>\n                            </van-cell>\n                        </van-cell-group>\n                    </van-radio-group>\n                </div>\n            </ui-page>\n        </template>\n\n    </van-field>\n</template>\n<script>\n    export default {\n        name:'ui-select',\n        props:{\n            label:'',//当前页标题\n            modelLabel:{},//回显名称\n            value:{},//回显值\n            multiple:{\n                type:Boolean,\n                default:false\n            },\n            max:{\n                type:Number\n            },\n            options:{\n                type:Array,\n                default:function(){\n                    return []\n                }\n            },\n            required:Boolean,\n            disabled:{\n                type:Boolean,\n                default:false\n            },\n            placeholder:String,\n            valueKey:{\n                type:String,\n                default:'text'\n            }\n        },\n        data(){\n            return {\n                //数据源\n                optionsAll: this.options.length?this.options : [],\n                searchVal: '',\n                selected: this.multiple ? [] : '', //当前可见列表选中项,它不包括被搜索过滤掉的列表选中项\n                isSearching: false,//true搜索请求中, false搜索完毕\n                searchTimeOut:null,\n                loaded:false,//数据源已加载过\n                fullText:'',\n                fullId:'',\n                oldSelected:'',//上次保存的值\n            }\n        },\n        computed:{\n            pageTitle(){\n                if (this.multiple) {\n                    let num = this.selected.length>0 ? `(${this.selected.length})` : ''\n                    return this.label + num\n                }\n                // 单选标题不加选中个数\n                return this.label\n            },\n            isChanged(){\n                let newVal,oldVal\n                if (this.selected.constructor === Array) {\n                    newVal = this.selected.sort() + ''\n                }else{\n                    newVal = this.selected + ''\n                }\n                if (this.oldSelected.constructor === Array) {\n                    oldVal = this.oldSelected.sort() + ''\n                }else{\n                    oldVal = this.oldSelected + ''\n                }\n                return newVal !== oldVal\n            },\n        },\n        watch:{\n            selected(v){//选中后带回参数到父页面\n                if (this.loaded===false) return;\n                if (this.multiple) {\n                    this.fullText = ''\n                    this.fullId = ''\n                    this.optionsAll.forEach((item)=>{\n                        this.selected.forEach((currSelected)=>{\n                            if (item.id === currSelected) {\n                                this.fullText += item[this.valueKey] + ','\n                                this.fullId += item.id + ','\n                            }\n                        })\n                    })\n                    this.fullId = this.fullId.replace(/,$/,'')\n                    this.fullText = this.fullText.replace(/,$/,'')\n                    this.$emit('input',this.fullId)\n                }else{\n                    this.$emit('input',v)\n                    this.optionsAll.forEach((item)=>{\n                        if (item.id === v) {\n                            this.fullText = item[this.valueKey]\n                        }\n                    })\n                }\n            },\n            options(v){//外层数据源变动\n                clearTimeout(this.searchTimeOut)\n                let selectedArr = this.getSelectedArray()\n                // 构建新数据源, 剔除历史已选项\n                let newOption = [...v]\n                selectedArr.forEach((sitem)=>{\n                    newOption.forEach((item,i)=>{\n                        if (sitem.id === item.id) {\n                            newOption.splice(i,1)\n                        }\n                    })\n                })\n                // 生成新数据源\n                this.optionsAll = Array.from(new Set([...selectedArr,...newOption]))\n                this.loaded = true\n                this.isSearching = false\n            },\n            value(v){//根据v-model选中\n                if (this.options.length && v && this.$refs.popup.active===false) {\n                    if (this.multiple) {\n                        this.selected = v.split(',')\n                    }else{\n                        this.selected = v\n                    }\n                }\n            },\n            searchVal(v){//搜索框清空时触发重置搜索列表\n                if (v==='') {\n                    this.search('')\n                }\n            }\n        },\n        methods:{\n            updateSelected(){\n                // 构建回显默认选中的\n                if (this.value) {\n                    if (this.multiple) {\n                        this.selected = this.value.split(',')\n                    }else{\n                        this.selected = this.value\n                    }\n                }\n            },\n            getSelectedArray(){// 构建历史已选项\n                let selectedArr = []\n\n                this.updateSelected()\n\n                // 构建之前选过的\n                const currentOpt = this.optionsAll.length===0 && this.value ? this.options : this.optionsAll\n                currentOpt.forEach((item)=>{\n                    if (this.multiple) {\n                        this.selected.forEach((sv)=>{\n                            if (item.id === sv) {\n                                selectedArr.push(item)\n                            }\n                        })\n                    }else{\n                        // 单选\n                        if (item.id === this.selected) {\n                            selectedArr.push(item)\n                        }\n                    }\n                })\n                return selectedArr\n            },\n            open(){//开启当前组件\n                if (this.disabled) return;\n                this.oldSelected = this.selected //记录当前选值\n                this.$refs.popup.open()\n            },\n            close(){//关闭当前组件\n                this.$refs.popup.close()\n            },\n            search(v=''){\n                this.searchVal = v\n                clearTimeout(this.searchTimeOut)\n                this.isSearching = Boolean(this.isSearching)\n\n                // 返回检索关键字和tab\n                this.$emit('search',this.searchVal)\n\n                this.isSearching = true\n\n                // 服务器检索的时间不可预期, 有可能超时. 关闭检索loading应交由组件外部控制\n                // this.searchTimeOut = setTimeout(() => {\n                //     this.isSearching=false\n                // }, 10000);\n            },\n            reset(){\n                this.fullText = ''\n                this.selected = this.multiple ? [] : ''//清空已选项\n                this.optionsAll.length=0\n                this.loaded = false\n            },\n            backAndConfirm(){\n                let selectedArr = this.getSelectedArray()\n\n                this.close()\n\n                // 新/老选值不同时触发change回调\n                if (this.isChanged) {\n                    this.$emit('change', selectedArr)\n                }\n                \n            },\n            toggleCheckbox(index){//多选单元格点击时触发多选框勾选\n                const current = this.$refs.checkboxes[index]\n                if (current.checked===false && this.selected.length >= this.max) {\n                    this.$toast('最多选择' + this.max + '项')\n                }else{\n                    this.$refs.checkboxes[index].toggle()\n                }\n            }\n        },\n        mounted(){\n            // 初始已有选项,关闭初始loading\n            if (this.options.length>0) {\n                this.loaded = true\n                this.updateSelected() //初始回显一次\n            }\n        }\n    }\n</script>"]}]}